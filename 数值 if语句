使用expr命令
    乘法操作应采用 \* 转义，避免被作为Shell通配符；参与运算的整数值与运算操作符之间需要以空格分开，引用变量时必须加$符号
[root@svr5 ~]# X=1234                              //定义变量X
[root@svr5 ~]# expr  $X  +  78                      //加法
1312

使用$[]或$(())表达式
乘法操作*无需转义，运算符两侧可以无空格；引用变量可省略 $ 符号；计算结果替换表达式本身，可结合echo命令输出
[root@svr5 ~]# X=1234   
[root@svr5 ~]# echo $[X+78]
1312
########################################################################################################
使用let命令
expr或$[]、$(())方式只进行运算，并不会改变变量的值；而let命令可以直接对变量值做运算再保存新的值
[root@svr5 ~]# let X++;  echo $X                   # X++(X=X+1)
[root@svr5 ~]# let X--;  echo $X                   # X--(X=X-1)
[root@svr5 ~]# let X+=78 ; echo $X                 # X+=78(X=X+78)
[root@svr5 ~]# let X-=78 ; echo $X                 # X-=78(X=X-78)
[root@svr5 ~]# let X*=78 ; echo $X                 # X*=78(X=X*78)
[root@svr5 ~]# let X/=78 ; echo $X                 # X/=78(X=X/78)
[root@svr5 ~]# let X%=78 ; echo $X                 # X%=78(X=X%79)
##################################################################################################
bc交互式运算
先执行bc命令进入交互环境，然后再输入需要计算的表达式

bc非交互式运算
将需要运算的表达式通过管道操作交给bc运算。
[root@svr5 ~]# echo 'scale=4;12.34+5.678' | bc
18.018
#####################################################################################################
字符串:
== 比较两个字符串是否相同
!= 比较两个字符串是否不相同
-z 检查变量的值是否未设置（空值）

[root@svr5 ~]# who | wc -l                                  //确认已登录的用户数
####################################################################################################
识别文件/目录的状态
-e 判断对象是否存在（不管是目录还是文件）
-d 判断对象是否为目录（存在且是目录）
-f 判断对象是否为文件（存在且是文件）
#####################################################################################################
&&，逻辑与
给定条件必须都成立，整个测试结果才为真。
多个条件组合时，可以使用 [[ .. ]] 界定
[root@svr5 ~]# [[ $X -gt 10 && $X -lt 30 ]] && echo "YES"
YES
||，逻辑或
只要其中一个条件成立，则整个测试结果为真。
[root@svr5 ~]# [ -w "/tmp/" ] || [ -w "/var/spool/" ] && echo "OK"
OK
######################################################################################################
检测并判断指定的主机是否可ping通
为了节省ping测试时间，可以只发送3个测试包（-c 3）、缩短发送测试包的间隔秒数（-i 0.2）、等待反馈的超时秒数（-W 3）
#!/bin/bash
ping -c 3 -i 0.2 -W 3 $1 &> /dev/null
if [ $? -eq 0 ] ; then
    echo "Host $1 is up."
else
    echo "Host $1 is down."
fi
######################################################################################################
从键盘读取一个论坛积分，判断论坛用户等级
#!/bin/bash
read -p "请输入积分（0-100）：" JF
if [ $JF –ge 90 ] ; then
    echo "$JF 分，神功绝世"
elif [ $JF –ge 80 ] ; then
    echo "$JF 分，登峰造极"
elif [ $JF –ge 70 ] ; then
    echo "$JF 分，炉火纯青"
elif [ $JF –ge 60 ] ; then
    echo "$JF 分，略有小成"
else
    echo "$JF 分，初学乍练"
fi
